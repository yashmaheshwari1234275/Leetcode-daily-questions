class Solution {
public:
    int largestRectangleArea(vector<int>& h) {
        int n = h.size();
        vector<int> pse(n, -1);  // Previous Smaller Element indices
        vector<int> nse(n, n);   // Next Smaller Element indices

        stack<int> st;

        // Fill the PSE array
        for (int i = 0; i < n; i++) {
            while (!st.empty() && h[st.top()] >= h[i]) {
                st.pop();
            }
            if (!st.empty()) {
                pse[i] = st.top();
            }
            st.push(i);
        }

        // Clear the stack to reuse for NSE
        while (!st.empty()) {
            st.pop();
        }

        // Fill the NSE array
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && h[st.top()] >= h[i]) {
                st.pop();
            }
            if (!st.empty()) {
                nse[i] = st.top();
            }
            st.push(i);
        }

        // Now calculate the maximum area using PSE and NSE arrays
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = nse[i] - pse[i] - 1;
            int area = h[i] * width;
            maxArea = max(maxArea, area);
        }

        return maxArea;
    }
};
