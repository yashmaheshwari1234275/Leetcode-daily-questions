/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        int idx=0;
        return solve(preorder,inorder,0,n-1,idx);
    }
    TreeNode* solve(vector<int>& preorder, vector<int>& inorder, int start, int end, int &idx) {
    if (start > end) return NULL;

    int val = preorder[idx];
    int splitIndex = -1;  // This will store the index of 'val' in inorder[]

    // Declare i inside the for loop
    for (int i = start; i <= end; i++) {
        if (inorder[i] == val) {
            splitIndex = i;
            break;
        }
    }

    idx++;
    TreeNode* root = new TreeNode(val);
    root->left = solve(preorder, inorder, start, splitIndex - 1, idx);
    root->right = solve(preorder, inorder, splitIndex + 1, end, idx);

    return root;
    }

};
